setup jenkins
1. install plugins project needs like nodejs, nodeLabel parameter etc. the built-in plugin includes ant,maven,jdk..
2. set global tools 
3. set label for nodes

scripting pipeline
jenkinsfile supports declarative and script two approaches. very little groovy knowledge is enough
to code.
for declarative jenkinsfile, directives agent, stages, steps are mandatory
for scripted jenkinsfile, directives node is mandatory

by default, in declarative approach, agent directive checks out source code automatically from the location where jenkinsfile locates.
therefore, no need to explicitly checkout source. but scripted coding approach, we must 
. pipeline syntax https://jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline 
. the basic stage a project CI should include build,test,and deploy
	note here jenkins build test deploy stages are not substitutes of maven build, junit test etc. it works as the glue to wire
	the stage together in jenkins.
	
	
jenkins ssh plugin
https://stackoverflow.com/questions/40928843/spring-boot-and-continuous-delivery-simple-pipeline	

Oct 3rd
===============================
today, i worked on jenkins auto-deployment. the goal of the deployment is to push the artifacts from Jfrog repository to application server.
below is the snippets
		stage('deploy'){
			steps{
				println "in deploy stage for ${pipeline_project}-${pipeline_component}"
				echo "stop application"
				//sh sudo kill -9 $(sudo lsof -i :8072)
				sh "ssh swang@10.224.162.95 mkdir -p temp"
				
				echo "wait till shutdown completed"
				//sh scp your_username@remotehost.edu:foobar.txt /some/local/directory;
				echo "copy latest release to server container"
				
				
				//download
				sh "curl -u simon.wang@aeroinfo.com:Aero1nfobb -O https://dat.jeppesen.com/artifactory/dsdtp-local-mvn-release/com/jeppesen/dtp/calculator/calculator-rest-api/0.0.0.30/calculator-rest-api-0.0.0.30.war"
				
				sh "scp calculator-rest-api-0.0.0.30.war swang@10.224.162.95"
				
				echo "startup application"
				//sh java -jar dtp.jar -Dserver.port=8080
			}
		}
		
Oct 5, 2017
======
Keep working on auto-deployment, which is implemented by a shell script. therefore, this shell script should be stored in
the folder in jenkins server and invoked by remote application server by ssh. there are some steps to do:
. manually generate ssh key and store on certain folder
https://medium.com/@weblab_tech/how-to-publish-artifacts-in-jenkins-f021b17fde71
	. go to ssh client which is the linux box installed jenkins
	. run ssh-keygen -t rsa to generate keys
	. note don't set passphrase
	. copy public key to application server
		scp .ssh/id_rsa.pub calculator@dencalc01fm.jeppesen.com:/apps/calculator/.ssh/authorized_keys
		go to application server
		chmod go-w ~/
		chmod 700 ~/.ssh
		chmod 600 ~/.ssh/authorized_keys 
		verify: ssh calculator@dencalc01fm.jeppesen.com ls #you should be able to see the result returned from application server
	. go jenkins ->manage jenkins->search key 'publish over ssh' ->add remote server and workspace
	. 
	
. install jenkins publish over ssh plugin
. create a new freestyle item 
	in general session, click advanced btn to check 'custom workspace folder' which defines where the shell script locates
	and select execute shell script by ssh in build process
	fill in the shell script file name
	
Summary:
======================================
. create jenkinsfile to define the general stages and steps by using either declarative or scripted approach
. many built-in step commands can be directly used in jenkinsfile. for some special use case, 
	they can be implemented by different approaches. we can define shell script or leverage jenkins plugin. note that
	once leverage plugin, we might need to define additional jenkins job to apply the function of the plugin.
	after all the pieces declared, jenkinsfile can integrate them together.
	call another job in jenkinsfile is 'build job: "job name"'
. credential management
	ref: https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs
	
Oct 7, 2017 ******
============================
great progress-->
after the long time struggling on ssh handshake by keys, finally i found the problem. 
Problem 1: in jenkins client, jenkins is running
under jenkins linux account. it means everything is set in jenkins job will be run on jenkins account. therefore, 
the key must be generated by jenkins user. [as already known, we have different key pairs when we login as different account
in ssh client machine.] the public open key under /var/lib/jenkins/.ssh folder must be appended into authorized_keys file 
in ssh server which is application server here. 	
Problem 2: when we configure jenkins publish over ssh plugin, the exec command shouldn't include ssh username@server command.
it should only have command because the remote server has been chosen already. the plugin knows the following commands will
be invoked in the chosen server.
====>:)

Oct 11, 2017
==============================================
Create parameterized deployment -- parameter to set where to deploy
how I configured my process:

**1. Configuring Jenkins**
1.1 Install Publish over Ssh plugin
1.2 Configure Jenkins => System Configuration
1.2.1 Publish over SSH section
1.2.1.1 Key => -----BEGIN RSA PRIVATE KEY----- ... here is your key ... -----END RSA PRIVATE KEY-----
1.2.1.2 SSH Servers =>
    * Name => Server_1 (It is only name of configuration)
    * Hostname => example_server_1.com (url of your server)
    * Username => ec2-user (for amazon)
    (Click "Add Server" button)
    * Name => Server_2 (It is only name of configuration)
    * Hostname => example_server_2.com (url of your server)
    * Username => ec2-user (for amazon)

**2. Job Configuration**
Open Job => Configure => 
1. Add String Parameter "Name=Server"
2.Check "Send files or execute commands over SSH" => SSH Server section
2.1 Name=server_1;
Exec_command=cd temp_directory(for example);
Click "Advanced" => Label=server_1;
2.2 Click "Add Server"; 
Name=server_2;
Exec_command=cd temp_directory(for example);
Click "Advanced" => Label=server_2;
2.3 In front of button "Add Server" click "Advanced"; Check "Parameterized publishing" => Parameter_name=Server

**3. Job running**

Run job and set for example server_2. You will see in log:

    SSH: Skipping [server_1] - Label server_1 does not match expression server_2
    SSH: Publishing to [server_2] - Label server_2 matches expression server_2
    SSH: Connecting from host [ip-10-0-0-37]
    SSH: Connecting with configuration [server_2] ...

It is seems that if you set server_2 job will try to compare parameter "Server" (you defined it before job starts) and labels in jobs. If label and parameter equals than exec commands in configuration.

Hope it was helpfull. Cause I spent on it 5 hours.
========================================================================